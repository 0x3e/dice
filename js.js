// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Craft = (function() {
    function Craft() {
      var craft;
      craft = new Probability([[1, 'Tailor'], [1, 'Fletcher/Bowyer'], [1, 'Glass Blower'], [1, 'Carpenter'], [1, 'Animal trainer'], [1, 'Beast master'], [1, 'Cartographer'], [1, 'Smith'], [1, 'Cobbler'], [1, 'Weaver'], [1, 'Armorer'], [1, 'Weaponsmith'], [1, 'Brewer'], [1, 'baker'], [1, 'Mason'], [1, 'Potter'], [1, 'Miller'], [1, 'Dyer'], [1, 'Shipwright'], [1, 'Jeweler'], [1, 'Artist'], [1, 'Sculptor'], [1, 'Musician']]);
      craft.add_section(1, 2, craft);
      return craft;
    }

    return Craft;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Dice = (function() {
    Dice.prototype.Die = (typeof Die !== "undefined" && Die !== null) && Die;

    Dice.prototype._match = /(\d*)\s*d\s*(\d+)\s*(.*)/;

    function Dice(arg) {
      this.arg = arg;
      this.Die = (Dice.prototype.Die != null) && Dice.prototype.Die || (this.Die = Die);
      this.args = {};
      if (this.arg) {
        this.roll();
      }
    }

    Dice.prototype._parse_arg = function(arg) {
      var arg_match, args;
      args = {};
      if (arg) {
        this.arg = arg;
      }
      if (!(this.arg && typeof this.arg === 'string')) {
        return args;
      }
      arg_match = this._match.exec(this.arg);
      if (!arg_match) {
        return args;
      }
      args.num = arg_match[1] || 1;
      args.faces = parseInt(arg_match[2], 10) || 0;
      args.mod = parseInt(arg_match[3].replace(/\s/g, ''), 10) || 0;
      return args;
    };

    Dice.prototype.roll = function(arg) {
      var _i, _ref;
      this._dice = [];
      this.args = this._parse_arg(arg);
      if (!this.is_good()) {
        return this;
      }
      for (_i = 1, _ref = this.args.num; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
        this._dice.push(new this.Die(this.args.faces));
      }
      return this;
    };

    Dice.prototype.get_total = function(arg) {
      if (arg) {
        this.roll(arg);
      }
      if (!this.is_good()) {
        return;
      }
      return this.get_mod() + this._get_unmod_total();
    };

    Dice.prototype.is_good = function() {
      return this.args && this.args.faces > 0 && this.args.num > 0;
    };

    Dice._if_good = function() {
      return function(f) {
        return function() {
          if (this.is_good()) {
            return f.apply(this, arguments);
          }
        };
      };
    };

    Dice.prototype.get_mod = Dice._if_good()(function() {
      return parseInt(this.args.mod, 10);
    });

    Dice.prototype.get_scores = Dice._if_good()(function() {
      var d, _i, _len, _ref, _results;
      _ref = this._dice;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        _results.push(parseInt(d.get_score(), 10));
      }
      return _results;
    });

    Dice.prototype.get_min = Dice._if_good()(function() {
      return this._get_unmod_min() + this.get_mod();
    });

    Dice.prototype.get_max = Dice._if_good()(function() {
      return this._get_unmod_max() + this.get_mod();
    });

    Dice.prototype.is_min = Dice._if_good()(function() {
      return this._get_unmod_total() === this._get_unmod_min();
    });

    Dice.prototype.is_max = Dice._if_good()(function() {
      return this._get_unmod_total() === this._get_unmod_max();
    });

    Dice.prototype._get_unmod_max = Dice._if_good()(function() {
      return parseInt(this.args.num * this.args.faces, 10);
    });

    Dice.prototype._get_unmod_min = Dice._if_good()(function() {
      return parseInt(this.args.num * 1, 10);
    });

    Dice.prototype._get_unmod_total = Dice._if_good()(function() {
      return this.get_scores().reduce(function(x, y) {
        return x + y;
      });
    });

    return Dice;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).DicesView = (function() {
    function DicesView(id, up_e, dice) {
      this.up_e = up_e;
      this.dice = dice;
      this.views = [];
      this.up = new View(this.up_e);
      this.con = this.up["new"]({
        element: 'div',
        id: "dices" + id,
        className: 'dices'
      });
      this.view = new View(this.con);
      this.form = this.view["new"]({
        element: 'form',
        className: 'dices_form'
      });
      this["in"] = this.view["new"]({
        element: 'input',
        className: 'dices_in',
        parent: this.form
      });
      this.sub = this.view["new"]({
        element: 'input',
        className: 'dices_sub',
        type: 'submit',
        parent: this.form
      });
      this.sub.value = 'Create Dice';
      this.out = this.view["new"]({
        element: 'div',
        id: 'dice'
      });
      this.sub.onclick = (function(_this) {
        return function() {
          _this.add_dice();
          return false;
        };
      })(this);
    }

    DicesView.prototype.add_dice = function() {
      var dice;
      dice = new this.dice(this["in"].value);
      if (dice.is_good()) {
        return this.views.push(new DiceView(this.views.length, this, this.out, dice));
      }
    };

    DicesView.prototype.remove_dice = function(dice_view) {
      this.views[dice_view.id] = void 0;
      return dice_view = void 0;
    };

    return DicesView;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).DiceView = (function() {
    DiceView.prototype.View = (typeof View !== "undefined" && View !== null) && View;

    function DiceView(id, parent, up_e, dice) {
      this.id = id;
      this.parent = parent;
      this.up_e = up_e;
      this.dice = dice;
      this.View = (DiceView.prototype.View != null) && DiceView.prototype.View || (this.View = View);
      this.up = new this.View(this.up_e);
      this.con = this.up["new"]({
        element: 'div',
        id: "dice" + this.id,
        className: 'dice',
        parent: this.up_e
      });
      this.view = new this.View(this.con);
      this.roll_a = this.view["new"]({
        element: 'a',
        innerHTML: 'roll',
        className: 'roll'
      });
      this.roll_a.href = 'javascript:void(0)';
      this.roll_a.onclick = (function(_this) {
        return function() {
          _this.roll();
          return false;
        };
      })(this);
      this.delete_a = this.view["new"]({
        element: 'a',
        innerHTML: 'delete',
        className: 'delete',
        parent: this.con
      });
      this.delete_a.href = 'javascript:void(0)';
      this.delete_a.onclick = (function(_this) {
        return function() {
          _this.destructor();
          return false;
        };
      })(this);
      this.label = this.view["new"]({
        element: 'div',
        innerHTML: this.dice.arg,
        className: 'label',
        parent: this.con
      });
      this.out = this.view["new"]({
        element: 'div',
        className: 'out',
        parent: this.con
      });
      this.update();
    }

    DiceView.prototype.update = function() {
      var tot, _out;
      tot = this.dice.get_total();
      this.view.empty(this.out);
      _out = this.view["new"]({
        element: 'div',
        innerHTML: this.dice.get_total(),
        parent: this.out
      });
      this.out.className += ' rolling';
      if (this.dice.is_max()) {
        _out.className = 'max';
      }
      if (this.dice.is_min()) {
        _out.className = 'min';
      }
      setTimeout((function(_this) {
        return function() {
          return _this.out.className = _this.out.className.replace(' rolling', '');
        };
      })(this), 500);
    };

    DiceView.prototype.roll = function() {
      this.dice.roll();
      this.update();
    };

    DiceView.prototype.destructor = function() {
      this.dice = null;
      this.view.remove(this.con);
      this.parent.remove_dice(this);
    };

    return DiceView;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Die = (function() {
    function Die(faces) {
      this._faces = parseInt(faces, 10);
      this.roll();
    }

    Die.prototype.roll = function() {
      if (!this._faces) {
        return;
      }
      return this._score = 1 + Math.floor((Math.random() * this._faces) / 1);
    };

    Die.prototype.get_faces = function() {
      return this._faces;
    };

    Die.prototype.get_score = function() {
      return this._score;
    };

    return Die;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Main = (function() {
    function Main() {
      window.onload = (function(_this) {
        return function() {
          var dice, dices_div;
          dice = Dice;
          _this.view = new View(document.body);
          dices_div = view["new"]({
            element: 'div',
            id: 'dices'
          });
          _this.dices_view = new DicesView(0, dices_div, dice);
        };
      })(this);
      return;
    }

    return Main;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Probability = (function() {
    function Probability(table) {
      this.table = table;
      return;
    }

    Probability.prototype.add_section = function(ar) {
      this.table.push(ar);
      return this;
    };

    Probability.prototype.get_string = function(which, join_string) {
      return ([].concat(this.get(which))).join(join_string);
    };

    Probability.prototype.get = function(which) {
      var row;
      if (which == null) {
        which = 1 + Math.floor((Math.random() * this.get_total_entries()) / 1);
      }
      row = this._get_row(which);
      return this._get_next(row);
    };

    Probability.prototype._get_next = function(row) {
      var out, r;
      if (typeof row[1] === 'number') {
        out = (function() {
          var _i, _ref, _results;
          _results = [];
          for (r = _i = 1, _ref = row[1]; 1 <= _ref ? _i <= _ref : _i >= _ref; r = 1 <= _ref ? ++_i : --_i) {
            _results.push(row[2].get());
          }
          return _results;
        })();
      } else {
        out = [row[1]];
        if (row[2]) {
          out.push(row[2].get());
        }
      }
      return out;
    };

    Probability.prototype._get_row = function(c) {
      var m, up, _i, _len, _ref;
      if (!c) {
        return [];
      }
      up = 0;
      _ref = this.table;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        up += m[0];
        if (up >= c) {
          return m;
        }
      }
      return [];
    };

    Probability.prototype.get_total_entries = function() {
      var m;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.table;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push(parseInt(m[0], 10));
        }
        return _results;
      }).call(this)).reduce(function(x, y) {
        return x + y;
      });
    };

    return Probability;

  })();

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  (typeof exports !== "undefined" && exports !== null ? exports : this).View = (function() {
    View.prototype.document = (typeof document !== "undefined" && document !== null) && document;

    function View(view_container) {
      this.view_container = view_container;
      this.document = (View.prototype.document != null) && View.prototype.document || (this.document = document);
    }

    View.prototype["new"] = function(ob) {
      var el, k, v;
      el = this.document.createElement(ob.element);
      if (k !== 'parent') {
        for (k in ob) {
          if (!__hasProp.call(ob, k)) continue;
          v = ob[k];
          el[k] = v;
        }
      }
      if (ob.parent) {
        ob.parent.appendChild(el);
      } else {
        this.view_container.appendChild(el);
      }
      return el;
    };

    View.prototype.remove = function(el) {
      this.empty(el);
      el.parentElement.removeChild(el);
    };

    View.prototype.empty = function(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };

    return View;

  })();

}).call(this);
