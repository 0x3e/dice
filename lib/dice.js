// Generated by CoffeeScript 1.7.1
(function() {
  var $0x3e;

  $0x3e = (typeof exports !== "undefined" && exports !== null) && exports || (this.$0x3e = {});

  $0x3e.Dice = (function() {
    function Dice(arg) {
      this.arg = arg;
      this.max = this.min = false;
      this.args = {};
      this.dice = [];
      if (this.arg) {
        this.roll();
      }
      this;
    }

    Dice.prototype.parse_arg = function(arg) {
      if (arg) {
        this.arg = arg;
      }
      if (!this.arg) {
        return;
      }
      arg = this.arg.match(/(\d*)d(\d+)(.*)/);
      this.args.num = arg[1] || 1;
      this.args.faces = parseInt(arg[2], 10) || 0;
      this.args.mod = arg[3] || 0;
      return this.args;
    };

    Dice.prototype.roll = function(arg) {
      var args, _i, _ref;
      this.dice = [];
      if (arg !== this.arg) {
        args = this.parse_arg(arg);
      }
      if (!this.args.num) {
        return;
      }
      for (_i = 1, _ref = this.args.num; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
        this.dice.push(new Die(this.args.faces));
      }
      return this;
    };

    Dice.prototype.get_total = function(arg) {
      var d, tot, _i, _len, _ref;
      if (arg) {
        this.roll(arg);
      }
      if (!this.dice.length) {
        return;
      }
      tot = 0;
      _ref = this.dice;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        tot += parseInt(d.score, 10);
      }
      this.max = tot === this.args.num * this.args.faces;
      this.min = tot === this.args.num * 1;
      tot += parseInt(this.args.mod);
      return tot;
    };

    return Dice;

  })();

}).call(this);
