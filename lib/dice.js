// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Dice = (function() {
    Dice.prototype.Die = (typeof Die !== "undefined" && Die !== null) && Die;

    Dice.prototype._match = /(\d*)\s*d\s*(\d+)\s*(.*)/;

    function Dice(arg) {
      this.arg = arg;
      this.Die = (Dice.prototype.Die != null) && Dice.prototype.Die || (this.Die = Die);
      this.args = {};
      if (this.arg) {
        this.roll();
      }
    }

    Dice.prototype._parse_arg = function(arg) {
      var arg_match, args;
      args = {};
      if (arg) {
        this.arg = arg;
      }
      if (!(this.arg && typeof this.arg === 'string')) {
        return args;
      }
      arg_match = this._match.exec(this.arg);
      if (!arg_match) {
        return args;
      }
      args.num = arg_match[1] || 1;
      args.faces = parseInt(arg_match[2], 10) || 0;
      args.mod = parseInt(arg_match[3].replace(/\s/g, ''), 10) || 0;
      return args;
    };

    Dice.prototype.roll = function(arg) {
      var _i, _ref;
      this._dice = [];
      this.args = this._parse_arg(arg);
      if (!this.is_good()) {
        return this;
      }
      for (_i = 1, _ref = this.args.num; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
        this._dice.push(new this.Die(this.args.faces));
      }
      return this;
    };

    Dice.prototype.get_total = function(arg) {
      if (arg) {
        this.roll(arg);
      }
      if (!this.is_good()) {
        return;
      }
      return this.get_mod() + this._get_unmod_total();
    };

    Dice.prototype.is_good = function() {
      return this.args && this.args.faces > 0 && this.args.num > 0;
    };

    Dice._if_good = function() {
      return function(f) {
        return function() {
          if (this.is_good()) {
            return f.apply(this, arguments);
          }
        };
      };
    };

    Dice.prototype.get_mod = Dice._if_good()(function() {
      return parseInt(this.args.mod, 10);
    });

    Dice.prototype.get_scores = Dice._if_good()(function() {
      var d, _i, _len, _ref, _results;
      _ref = this._dice;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        _results.push(parseInt(d.get_score(), 10));
      }
      return _results;
    });

    Dice.prototype.get_min = Dice._if_good()(function() {
      return this._get_unmod_min() + this.get_mod();
    });

    Dice.prototype.get_max = Dice._if_good()(function() {
      return this._get_unmod_max() + this.get_mod();
    });

    Dice.prototype.is_min = Dice._if_good()(function() {
      return this._get_unmod_total() === this._get_unmod_min();
    });

    Dice.prototype.is_max = Dice._if_good()(function() {
      return this._get_unmod_total() === this._get_unmod_max();
    });

    Dice.prototype._get_unmod_max = Dice._if_good()(function() {
      return parseInt(this.args.num * this.args.faces, 10);
    });

    Dice.prototype._get_unmod_min = Dice._if_good()(function() {
      return parseInt(this.args.num * 1, 10);
    });

    Dice.prototype._get_unmod_total = Dice._if_good()(function() {
      return this.get_scores().reduce(function(x, y) {
        return x + y;
      });
    });

    return Dice;

  })();

}).call(this);
