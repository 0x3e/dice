// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).Dice = (function() {
    Dice.prototype.Die = (typeof Die !== "undefined" && Die !== null) && Die;

    function Dice(arg) {
      this.arg = arg;
      this.die = (Dice.prototype.Die != null) && Dice.prototype.Die || (this.die = Die);
      this.args = {};
      if (this.arg) {
        this.roll();
      }
    }

    Dice.prototype._parse_arg = function(arg) {
      if (arg) {
        this.arg = arg;
      }
      arg = this.arg.match(/(\d*)d(\d+)(.*)/);
      this.args.num = arg[1] || 1;
      this.args.faces = parseInt(arg[2], 10) || 0;
      this.args.mod = arg[3] || 0;
      return this.args;
    };

    Dice.prototype.roll = function(arg) {
      var args, _i, _ref;
      this.dice = [];
      if (arg !== this.arg) {
        args = this._parse_arg(arg);
      }
      if (!this.args.num) {
        return;
      }
      for (_i = 1, _ref = this.args.num; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
        this.dice.push(new this.die(this.args.faces));
      }
      return this;
    };

    Dice.prototype.is_min = function() {
      return this.get_unmod_total() === this.get_unmod_min();
    };

    Dice.prototype.is_max = function() {
      return this.get_unmod_total() === this.get_unmod_max();
    };

    Dice.prototype.get_unmod_max = function() {
      return parseInt(this.args.num * this.args.faces, 10);
    };

    Dice.prototype.get_unmod_min = function() {
      return parseInt(this.args.num * 1, 10);
    };

    Dice.prototype.get_max = function() {
      return this.get_unmod_max() + this.get_mod();
    };

    Dice.prototype.get_min = function() {
      return this.get_unmod_min() + this.get_mod();
    };

    Dice.prototype.get_total = function(arg) {
      if (arg) {
        this.roll(arg);
      }
      if (!this.dice.length) {
        return;
      }
      return this.get_mod() + this.get_unmod_total();
    };

    Dice.prototype.get_unmod_total = function() {
      return this.get_scores().reduce(function(x, y) {
        return x + y;
      });
    };

    Dice.prototype.get_scores = function() {
      var d, _i, _len, _ref, _results;
      _ref = this.dice;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        _results.push(parseInt(d.score, 10));
      }
      return _results;
    };

    Dice.prototype.get_mod = function() {
      return parseInt(this.args.mod, 10);
    };

    return Dice;

  })();

}).call(this);
