// Generated by CoffeeScript 1.7.1
(function() {
  (typeof exports !== "undefined" && exports !== null ? exports : this).DiceView = (function() {
    DiceView.prototype.View = (typeof View !== "undefined" && View !== null) && View;

    function DiceView(id, parent, up_e, dice) {
      this.id = id;
      this.parent = parent;
      this.up_e = up_e;
      this.dice = dice;
      this.View = (DiceView.prototype.View != null) && DiceView.prototype.View || (this.View = View);
      this.up = new this.View(this.up_e);
      this.con = this.up["new"]({
        element: 'div',
        id: "dice" + this.id,
        className: 'dice',
        parent: this.up_e
      });
      this.view = new this.View(this.con);
      this.roll_a = this.view["new"]({
        element: 'a',
        innerHTML: 'roll',
        className: 'dice_roll'
      });
      this.roll_a.href = 'javascript:void(0)';
      this.roll_a.onclick = (function(_this) {
        return function() {
          _this.roll();
          return false;
        };
      })(this);
      this.delete_a = this.view["new"]({
        element: 'a',
        innerHTML: 'delete',
        className: 'dice_delete',
        parent: this.con
      });
      this.delete_a.href = 'javascript:void(0)';
      this.delete_a.onclick = (function(_this) {
        return function() {
          _this.destructor();
          return false;
        };
      })(this);
      this.label = this.view["new"]({
        element: 'div',
        innerHTML: this.dice.arg,
        className: 'dice_label',
        parent: this.con
      });
      this.out = this.view["new"]({
        element: 'div',
        className: 'dice_out',
        parent: this.con
      });
      this.update();
    }

    DiceView.prototype.update = function() {
      var tot, _out;
      tot = this.dice.get_total();
      this.view.empty(this.out);
      _out = this.view["new"]({
        element: 'div',
        innerHTML: this.dice.get_total(),
        parent: this.out
      });
      if (this.dice.is_max()) {
        _out.className = 'max';
      }
      if (this.dice.is_min()) {
        _out.className = 'min';
      }
    };

    DiceView.prototype.roll = function() {
      this.dice.roll();
      this.update();
    };

    DiceView.prototype.destructor = function() {
      this.dice = null;
      this.view.remove(this.con);
      this.parent.remove_dice(this);
    };

    return DiceView;

  })();

}).call(this);
