// Generated by CoffeeScript 1.7.1
var Dice, expect;

(typeof window !== "undefined" && window !== null) || (require('blanket'), expect = require('chai').expect, Dice = require('dice').Dice, Dice.prototype.Die = require('die').Die);

describe('Dice', function() {
  var d;
  d = null;
  it('total show undefined without dice 1', function() {
    d = new Dice();
    return expect(d.get_total()).to.be.undefined;
  });
  it('total show undefined without dice 2', function() {
    return expect(d.get_max()).to.be.undefined;
  });
  it('total show undefined without dice 3', function() {
    return expect(d.get_min()).to.be.undefined;
  });
  it('total show undefined without dice 4', function() {
    return expect(d.is_max()).to.be.undefined;
  });
  it('total show undefined without dice 5', function() {
    return expect(d.is_min()).to.be.undefined;
  });
  it('should deal with good input 1', function() {
    return expect(d.roll('d2').get_total()).to.be.within(1, 2);
  });
  it('should deal with good input 2', function() {
    return expect(d.roll('1 d 2').get_total()).to.be.within(1, 2);
  });
  it('should deal with good input 2', function() {
    return expect(d.roll('1 d 2 +1').get_total()).to.be.within(2, 3);
  });
  it('should deal with good input 3', function() {
    return expect(d.roll('1 d 2 + 1').get_total()).to.be.within(2, 3);
  });
  it('should deal with good input 4', function() {
    return expect(d.roll('   1   d   2   +   1   ').get_total()).to.be.within(2, 3);
  });
  it('should deal with bad input 1', function() {
    d = new Dice();
    return expect(d.roll(1).get_total()).to.be.undefined;
  });
  it('should deal with bad input 2', function() {
    return expect(d.roll('1').get_total()).to.be.undefined;
  });
  it('should deal with bad input 3', function() {
    return expect(d.roll('g').get_total()).to.be.undefined;
  });
  it('should deal with bad input 4', function() {
    return expect(d.roll('0').get_total()).to.be.undefined;
  });
  it('should deal with bad input 5', function() {
    return expect(d.roll('d0').get_total()).to.be.undefined;
  });
  it('should deal with bad input 6', function() {
    return expect(d.roll('0d0').get_total()).to.be.undefined;
  });
  it('should deal with bad input 7', function() {
    return expect(d.roll('2d0').get_total()).to.be.undefined;
  });
  it('should deal with bad input 8', function() {
    return expect(d.roll('0d8').get_total()).to.be.undefined;
  });
  it('should have a correct max 1', function() {
    d = new Dice('10d2');
    return expect(d.get_max()).to.equal(20);
  });
  it('should have a correct max 2', function() {
    d = new Dice('10d2+10');
    return expect(d.get_max()).to.equal(30);
  });
  it('should have a correct min', function() {
    d = new Dice('10d2');
    expect(d.get_min()).to.equal(10);
    d = new Dice('10d2-10');
    expect(d.get_min()).to.equal(0);
    d = new Dice('10d2+10');
    return expect(d.get_min()).to.equal(20);
  });
  return it('should have a suitable score ', function() {
    var i, _i, _j, _k, _l, _m, _n, _results;
    d = new Dice('1d2');
    for (i = _i = 1; _i <= 10; i = ++_i) {
      d.roll();
      expect(d.get_total()).to.be.above(0);
      expect(d.get_total()).to.be.within(1, 2);
      expect(d.get_total()).to.be.below(3);
      if (d.get_total() === 2) {
        expect(d.is_max()).to.be["true"];
      } else {
        expect(d.is_max()).to.be["false"];
      }
      if (d.get_total() === 1) {
        expect(d.is_min()).to.be["true"];
      } else {
        expect(d.is_min()).to.be["false"];
      }
    }
    for (i = _j = 1; _j <= 10; i = ++_j) {
      d.roll('d' + i);
      expect(d.get_total()).to.be.above(0);
      expect(d.get_total()).to.be.within(1, i);
      expect(d.get_total()).to.be.below(i + 1);
      if (d.get_total() === i) {
        expect(d.is_max()).to.be["true"];
      } else {
        expect(d.is_max()).to.be["false"];
      }
      if (d.get_total() === 1) {
        expect(d.is_min()).to.be["true"];
      } else {
        expect(d.is_min()).to.be["false"];
      }
    }
    for (i = _k = 1; _k <= 10; i = ++_k) {
      d.roll(i + 'd6');
      expect(d.get_total()).to.be.above(0);
      expect(d.get_total()).to.be.within(1, i * 6);
      expect(d.get_total()).to.be.below(i * 6 + 1);
      if (d.get_total() === i * 6) {
        expect(d.is_max()).to.be["true"];
      } else {
        expect(d.is_max()).to.be["false"];
      }
      if (d.get_total() === i * 1) {
        expect(d.is_min()).to.be["true"];
      } else {
        expect(d.is_min()).to.be["false"];
      }
    }
    for (i = _l = 1; _l <= 10; i = ++_l) {
      d.roll('3d6+' + i);
      expect(d.get_total()).to.be.above(2 + i);
      expect(d.get_total()).to.be.within(3 + i, 18 + i);
      expect(d.get_total()).to.be.below(25 + i);
      if (d.get_total() === 18 + i) {
        expect(d.is_max()).to.be["true"];
      } else {
        expect(d.is_max()).to.be["false"];
      }
      if (d.get_total() === 3 + i) {
        expect(d.is_min()).to.be["true"];
      } else {
        expect(d.is_min()).to.be["false"];
      }
    }
    for (i = _m = 1; _m <= 10; i = ++_m) {
      d.roll('3d6+6');
      expect(d.get_total()).to.be.above(3 + 5);
      expect(d.get_total()).to.be.within(3 + 6, 3 * 6 + 6);
      expect(d.get_total()).to.be.below(3 * 6 + 7);
      if (d.get_total() === 24) {
        expect(d.is_max()).to.be["true"];
      } else {
        expect(d.is_max()).to.be["false"];
      }
      if (d.get_total() === 9) {
        expect(d.is_min()).to.be["true"];
      } else {
        expect(d.is_min()).to.be["false"];
      }
    }
    _results = [];
    for (i = _n = 1; _n <= 10; i = ++_n) {
      _results.push(expect(d.get_total('30d2+5')).to.be.within(d.get_min(), d.get_max()));
    }
    return _results;
  });
});
